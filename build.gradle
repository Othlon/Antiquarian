buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = config.group_name
archivesBaseName = "[${config.minecraft_version}]${config.mod_id}"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version // grab latest forge
    runDir = "run"
    replace '@MOD_VERSION@', version
    replace '@API_VERSION@', config.api_version
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in the files we want.
            from(sourceSets.main.resources.srcDirs) {
                include '**/*.info'
                include '**/*.properties'

                // replaces
                expand ([
                        'mod_version': version,
                        'forge_version': config.forge_version,
                        'minecraft_version': config.minecraft_version
                ])
            }

            // copy everything else, thats we didnt do before
            from(sourceSets.main.resources.srcDirs) {
                exclude '**/*.info'
                exclude '**/*.properties'
            }
        }

// add a source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    appendix = 'deobf'
    classifier = 'src'
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = 'deobf'
}

artifacts {
    archives sourceJar
    archives deobfJar
}

task copyChicken(type: Copy, dependsOn: "extractUserDev") {
    from { configurations.compile }
    into file("./run/mods") // paralell to the assets dir
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}